Memory Layout for .bin files for models.
Notes:
Even though .size() returns a size_t (8 or 16 bytes long) it will be truncated to a smaller unit (b/c an unsigned long long will never be filled by these sizes).
Also, the basic idea here is, instead of storing each frame's full vertex data, we store all of the unique data across all frames and index them that way.

---------

> A 1-byte unsigned integer denoting the size of the string that follows.

Ex.
00001000 -> Raw: 8. There will be 8 characters in the actor's name string.

---------

> The name of the actor is written, with a byte denoting an individual character in the name 
string.

Ex.
01100001 01100011 01110100 01101111 01110010 -> "actor"
01100100 01110010 01100001 01100111 01101111 01101110 -> "dragon"

---------

> A 1-byte unsigned integer denoting the amount of animations for the actor.

Ex.
00000011 -> Raw: 3. There will be 3 animations for this actor.

---------

> A 1-byte unsigned integer denoting the length of the animation's name string.

Ex.
01000001 -> Raw: 65. There will be 65 characters in the animation's name string.

---------

> A variable-size (see above) chain of 1-byte characters for the animation's name.

Ex. 
01101001 01100100 01101100 01100101 -> "idle"
01110111 01100001 01101100 01101011 00110000 00110000 -> "walk00"

---------

> A 32-bit unsigned integer denoting the amount of vertex x-position-indices.

Ex.
00000000 00000001 01111101 00011111 -> Raw: 97,567. There are 97,567 unique vertex x-positions.

---------

> A variable-size chain of 32-bit single-precision floating point values.

Ex.
01000000 00100000 00000000 00000000 -> Raw: 2.5f. This vertex's x-position is 2.5.

---------

(y-pos-values, z-pos-values, u-tex-values, v-tex-values, x-norm-values, y-norm-values, and 
z-norm-values follow the same layout as above)

---------

> A 32-bit unsigned integer denoting the amount of 3(p/p/p/t/t/n/n/n) indices.

Ex.
00000000 00000000 00000000 10000000 -> Raw: 255. There are 255 triangles.

Note: Since every triangle will have three sets of indices, it would be better to store the amount 
of triangles, with a byte stride of 96 bytes (3*8*4).

---------

> Each vertex now requires 8 different indices for data. 3 of these vertices (24ct, 32-bit unsigned 
int values) and a triangle is made. The layout, if it were a .obj file, would look like this: 

p/p/p/t/t/n/n/n p/p/p/t/t/n/n/n p/p/p/t/t/n/n/n

Ex.

00000000 00000000 00000000 00000100 -> Raw: 4. posxval x-value = 4th element in vertposxval table.
00000000 00000000 00000000 00000010 -> Raw: 2. posyval = 2nd element in vertposyval table.
00000000 00000000 00000000 00010000 -> Raw: 32. poszval = 32nd element in vertposzval table.

00000000 00000000 00000000 00000001 -> Raw: 1. texuval = 1st element in verttexuval table.
00000000 00000000 00000000 00000011 -> Raw: 3. texvval v-value = 3rd element in verttexvval table.

00000000 00000000 00000000 00010000 -> Raw: 32. nrmxval = 32nd element in vertnrmxval table.
00000000 00000000 00000000 00000010 -> Raw: 2. nrmyval = 2nd element in vertnrmyval table.
00000000 00000000 00000000 00000100 -> Raw: 4. nrmzval = 4th element in vertnrmzval table.

---------

